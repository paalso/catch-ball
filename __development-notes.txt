Fri Nov  5 

Даже в таком микропроекте приходится сталкиваться с глубокими рефлексиями
по поводу архитектуры, например: подсчет очков в ести в классе MovingItems,
в к-м происходит контроль за созданием и уничтожением Moving Items,
в т.ч. и начисление очков за уничтоженные или завести отдельный класс - 
типа GameStats и передавать туда сигнал об очередном уничтоженном..
А потом передавать экземпляр со статистикой в InfoPanel для отображения
статистики на экране?

Идея к подсчету очков: если одновременно уничтожается несколько items 
(такое бывает), то начислять суммарное кол-во очков выше аддитвного

Уточнить формулы начисления очков - через пложади круга и кольца



Sun Nov  7 00:44:39 EET 2021

За основу этого класса (недоработанного Popup) взят класс из игры Alien Invasion
Его задача состояла в том, чтобы формировать (всплывающее) текстовое окно,
к-е можно впоследствии закрыть каким-л. действием мыши или клавиатуры
Для этой игры, впрочем хватало только функциональности информационного
текстового окна
В pygame очень неудобно организована работа с текстом -
в частности, он не переносится
В Popup из Alien Invasion для переносов текста в ограниченной по ширине области
использовалась ф-я word_wrap, но, все равно это было не очень неудобно:
например, при попытке сформировать нечто вроде таблицы, очень сложно
было подобрать отступы (с помощью пробелов) между элементами строк, при этом
начинались проблемы с переносом строк и т.п.

В этой игре я попытался реализовать класс иначе:
- разбиваем текст на строки (для этого он изначально должен содержать символы
переносов строк)
- методом render() экземпляра Font формируем "полоски"-поверхности с изображением
этих строк, сохраняем
- рассчитываем размеры общей поверхности, к-я их будет содержать (высота = 
сумме высот, ширина = максимуму ширин)
- формируем поверхность необходимых размеров
- накладываем на него полученные "полоски"
Profit!
Но что-то недополучилось, и я реализовал гораздо более простой вариант отображения 
многострочного текста - класс Text
Он принимает текст, разбивет на строки и просто печатает их одну под другой
Очень примитивно, но работает
Кстати, нужно таки добавить возможность использования разных шрифтов (пока он работает
на дефолтном pygame.font.Font(None, ...)) - например могут понадобиться
моноширинные шрифтв для печаити таблиц.
